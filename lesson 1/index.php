Задание №1
Ключевое слово global - используется для импорта переменных из глобальной области видимости в локальную область видимости функции. Раньше использовался, когда появлялась необходимость использовать некоторые данные в разных частях кода. Пример: настройки конфига, параметры соединения с базой данных, идентификатор юзера. Хотя сейчас использование глобальных переменных – является плохой практикой, по крайней мере если в коде применены методы ООП. Оно приводит к появлению излишней взаимозависимости между классами, затрудняет разделение логики, приводит к загрязнению глобального пространства имён переменными, которые используются в одном конкретном контексте, и не нужны в других.


Задание №2.
$GLOBALS - список всех глобальных переменных в скрипте.
$_GET - содержит список всех полей формы, отправленной браузером с помощью запроса GET.
$_POST - содержит список всех полей формы отправленной браузером с помощью запроса POST.
$_COOKIE - содержит список всех куки, отправленных браузером.
$_REQUEST - содержит все сочетания ключ/значение, которые содержатся в массивах $_GET, $_POST, $_COOKIE.
$_FILES - содержит список всех файлов, загруженных браузером.
$_SESSION - позволяет хранить и использовать переменные сессии для текущего браузера.
$_SERVER - содержит информацию о сервере, такую как, имя файла выполняемого скрипта и IP адрес браузера.
$_ENV - содержит список переменных среды, передаваемых PHP, например, CGI переменные.


Задание №3.
Если в файле с расширением .php, необходимо вывести php код внутри html вёрстки, то тогда появляется необходимость использвоать открывающий и закрывающий дескриптор, а внутри соответственно уже писать php код.


Задание №4.
function changeX($x){
   $x += 5;
   echo $x;
}
$x = 1;
echo $x;        //Выведит 1
changeX($x);    //Сработает функция в результате которой получим 6
echo $x;        //Выведит 1. Того на экране увидим 161


Задание №5.
function test()
{
    static $a = 0;
    echo $a;
    $a++;
}
test();
test();
test();
Ключевое слово static, написанное перед присваиванием значения локальной переменной, приводит к следующим эффектам:
- Присваивание выполняется только один раз, при первом вызове функции
- Значение помеченной таким образом переменной сохраняется после окончания работы функции
- При последующих вызовах функции вместо присваивания переменная получает сохраненное ранее значение


Задание №6.
array_reverse() — Возвращает массив с элементами в обратном порядке.
Пример: print_r(array_reverse(['h', 'e', 'l', 'l', 'o']));


Задание №7.
strrev() — Переворачивает строку задом наперед
Пример: print_r(strrev('hello'));


Задание №8.
$a=0;
if($b=$a)
    echo "One";
else
    echo "Two";

a=0, b присваевается значение a, которое в вырожении if является ложным, так как = 0, поэтому выводится тело else.


Задание №9.
function randomNum() {
  $a = mt_rand(0, 10);
  $b = mt_rand(0, 10);
  $c = mt_rand(0, 10);
  
  $d = $a +$b +$c;
  
  if ($d > 15) {
    randomNum();
  } else {
    return $a;
  }
}

echo randomNum();


Задание №10.
$i = 10;
$i += ++$i + $i + $i++;      // 10 += 11 + 11 + 11 -> 10 += 33 -> 43
echo $i;